const int loudspeaker_pin = 13; // 13番ポートを使う
const int base_time = 16 * 100;  // 16の倍数が都合がいい

void setup()
{
  pinMode(loudspeaker_pin, OUTPUT); // 使うIOポートを出力に指定
}

void loop()
{
  int i;
  for(i=0;i<3;i++){
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    noTone(loudspeaker_pin);
    delay(base_time / 16);
    tone(loudspeaker_pin, 659);
    delay(base_time / 4);
    tone(loudspeaker_pin, 587);
    delay(base_time / 4);
    tone(loudspeaker_pin, 523);
    delay(base_time / 3);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    tone(loudspeaker_pin, 587);
    delay(base_time / 4);
    tone(loudspeaker_pin, 523);
    delay(base_time / 6);
    noTone(loudspeaker_pin);
    delay(base_time / 64);
    tone(loudspeaker_pin, 523);
    delay(base_time / 6);
    noTone(loudspeaker_pin);
    delay(base_time / 64);
    tone(loudspeaker_pin, 523);
    delay(base_time / 3);
    noTone(loudspeaker_pin);
    delay(base_time / 16);
    tone(loudspeaker_pin, 523);
    delay(base_time / 12);
    tone(loudspeaker_pin, 587);
    delay(base_time / 12);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    noTone(loudspeaker_pin);
    delay(base_time / 32);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    noTone(loudspeaker_pin);
    delay(base_time / 32);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    tone(loudspeaker_pin, 698);
    delay(base_time / 8);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    tone(loudspeaker_pin, 523);
    delay(base_time / 8);
    noTone(loudspeaker_pin);
    delay(base_time / 32);
    tone(loudspeaker_pin, 523);
    delay(base_time / 8);
    tone(loudspeaker_pin, 659);
    delay(base_time / 8);
    noTone(loudspeaker_pin);
    delay(base_time / 32);
    tone(loudspeaker_pin, 659);
    delay(base_time / 4);
    tone(loudspeaker_pin, 587);
    delay(base_time / 5);
    tone(loudspeaker_pin, 523);
    delay(base_time / 7);
    noTone(loudspeaker_pin);
    delay(base_time / 32);
    tone(loudspeaker_pin, 523);
    delay(base_time / 3);
  }
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  noTone(loudspeaker_pin);
  delay(base_time / 16);
  tone(loudspeaker_pin, 659);
  delay(base_time / 4);   
  tone(loudspeaker_pin, 587);   
  delay(base_time / 4);
  tone(loudspeaker_pin, 523);
  delay(base_time / 3);
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  tone(loudspeaker_pin, 587);
  delay(base_time / 4);
  tone(loudspeaker_pin, 523);
  delay(base_time / 6);
  noTone(loudspeaker_pin);
  delay(base_time / 64);
  tone(loudspeaker_pin, 523);
  delay(base_time / 6);
  noTone(loudspeaker_pin);
  delay(base_time / 64);
  tone(loudspeaker_pin, 523);
  delay(base_time / 3);
  tone(loudspeaker_pin, 523);
  delay(base_time / 10);
  tone(loudspeaker_pin, 587);
  delay(base_time / 12);
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  noTone(loudspeaker_pin);
  delay(base_time / 32);
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  noTone(loudspeaker_pin);
  delay(base_time / 32);
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  tone(loudspeaker_pin, 698);
  delay(base_time / 8);
  tone(loudspeaker_pin, 784);
  delay(base_time / 8);
  tone(loudspeaker_pin, 698);
  delay(base_time / 8);
  tone(loudspeaker_pin, 659);
  delay(base_time / 8);
  tone(loudspeaker_pin, 698);
  delay(base_time / 8);
  tone(loudspeaker_pin, 659);
  delay(base_time / 4);
  tone(loudspeaker_pin, 587);
  delay(base_time / 5);
  tone(loudspeaker_pin, 523);
  delay(base_time / 7);
  noTone(loudspeaker_pin);
  delay(base_time / 32);
  tone(loudspeaker_pin, 523);
  delay(base_time / 2);
  noTone(loudspeaker_pin);
  delay(5000);

}